# This workflow will create a new release with the pushed tag, it will also
# auto generate a changelog for the release body and update CHAGELOG.md.

# Lastly it will deploy a new version to PyPI if the release was successfull,
# and the tag != (alpha, beta)

name: Release and deploy

on:
  push:
    # branches:
      # - master
    paths:
      - 'mysdk/version.py'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get version
        id: tag
        run: |
          echo ::set-output name=SOURCE_TAG::$(sed -n '/__version__/,//p' mysdk/version.py | awk -F "'" '{print $2}')

      - name: Create tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{steps.tag.outputs.SOURCE_TAG}}",
              sha: context.sha
            })

      - name: Generate changelog
        uses: charmixer/auto-changelog-action@v1
        with:
          output: NEW_CHANGELOG.md
          exclude_tags: 'test,'
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Remove comment
        run: head -n -4 NEW_CHANGELOG.md > CHANGELOG.md

      - name: Update changelog
        uses: test-room-7/action-update-file@v1
        with:
          file-path: |
            CHANGELOG.md
            mysdk/version.py
          commit-msg: Update resource - workflow
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get release changelog
        run: |
          echo  "new version $TAG"
          perl -ne '$k++ if /##/; {print if $k<2}' CHANGELOG.md > RELEASE.md
        env:
          TAG: ${{ steps.tag.outputs.SOURCE_TAG }}

      - name: Create release
        uses: actions/create-release@v1
        with:
          tag_name: env.TAG
          release_name: env.TAG
          body_path: RELEASE.md
          prerelease: ${{ contains(env.TAG, '-') }}
          draft: false # true on testing
        env:
          TAG: ${{ steps.tag.outputs.SOURCE_TAG }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  deploy:
      needs: release
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2

        - name: Get version
          id: tag
          run: |
            echo ::set-output name=SOURCE_TAG::$(sed -n '/__version__/,//p' mysdk/version.py | awk -F "'" '{print $2}')

        - name: Check version
          if: ${{ contains(env.TAG, '-') }}
          env:
            TAG: ${{ steps.tag.outputs.SOURCE_TAG }}

        - name: Set up Python
          if: success()
          uses: actions/setup-python@v2
          with:
            python-version: '3.8'

        - name: Install dependencies
          if: success()
          run: |
            python -m pip install --upgrade pip
            pip install setuptools wheel twine

        # - name: Build and publish
        #   if: success()
        #   env:
        #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        #   run: |
        #     python setup.py sdist bdist_wheel
        #     twine upload dist/*
